version: '3.8'

services:
  # Servicio de Backend (Java Spark)
  backend:
    build:
      context: . # El contexto es el directorio actual (docker-deployment)
      dockerfile: Dockerfile # Usa el Dockerfile que creamos
    networks:
      - redcomex_network # Asigna a nuestra red interna
    ports:
      # No exponemos el puerto 4567 directamente al host
      # Solo es accesible desde la red interna de Docker
      - "4567:4567" # Solo para que Docker Compose sepa que este puerto se usa internamente

  # Servicio de Frontend (Nginx)
  frontend:
    build:
      context: ../frontend # El contexto es la carpeta 'frontend' que contiene 'dist'
      dockerfile: Dockerfile # Vite ya genera un Dockerfile en la raíz de 'dist' o puedes crear uno simple
    # OJO: Si tu frontend es solo archivos estáticos, no necesitas build.
    # Puedes montar directamente la carpeta dist, pero construir la imagen es más robusto.
    # Por simplicidad, asumiremos que tu carpeta 'dist' es el resultado final
    # y que la imagen base de Nginx es suficiente.
    image: nginx:alpine # Usamos una imagen de Nginx pre-construida
    volumes:
      - ../frontend/dist:/usr/share/nginx/html:ro # Monta tu carpeta 'dist'
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro # Monta la configuración de Nginx
      # Monta los certificados SSL para HTTPS
      - ./nginx/certs:/etc/nginx/certs:ro
    ports:
      - "80:80"   # Puerto HTTP (redirige a HTTPS)
      - "443:443" # Puerto HTTPS
    networks:
      - redcomex_network # Asigna a nuestra red interna
    depends_on:
      - backend # El frontend depende del backend para las llamadas API

  # Servicio de Base de Datos MySQL
  db:
    image: mysql:8.0 # Versión de MySQL
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # Contraseña de root (usa una variable de entorno)
      MYSQL_DATABASE: ${MYSQL_DATABASE}         # Nombre de la base de datos
      MYSQL_USER: ${MYSQL_USER}                 # Usuario para la base de datos
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}         # Contraseña para el usuario
    volumes:
      - db_data:/var/lib/mysql # Persistencia de datos
      # Si tienes scripts SQL para inicializar tu DB, puedes montarlos aquí:
      # - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - redcomex_network
    restart: always # Siempre intenta reiniciar si falla

  # Servicio de phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    environment:
      PMA_HOST: db # El nombre del servicio MySQL en la red Docker
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "8080:80" # Expone phpMyAdmin en el puerto 8080 de tu host
    networks:
      - redcomex_network
    depends_on:
      - db # phpMyAdmin depende de que la base de datos esté lista

# Redes definidas para que los contenedores puedan comunicarse entre sí
networks:
  redcomex_network:
    driver: bridge

# Volúmenes definidos para la persistencia de datos de MySQL
volumes:
  db_data:
